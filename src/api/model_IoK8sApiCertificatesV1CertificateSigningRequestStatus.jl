# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.

    IoK8sApiCertificatesV1CertificateSigningRequestStatus(;
        certificate=nothing,
        conditions=nothing,
    )

    - certificate::Vector{UInt8} : certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.  If the certificate signing request is denied, a condition of type \&quot;Denied\&quot; is added and this field remains empty. If the signer cannot issue the certificate, a condition of type \&quot;Failed\&quot; is added and this field remains empty.  Validation requirements:  1. certificate must contain one or more PEM blocks.  2. All PEM blocks must have the \&quot;CERTIFICATE\&quot; label, contain no headers, and the encoded data   must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.  3. Non-PEM content may appear before or after the \&quot;CERTIFICATE\&quot; PEM blocks and is unvalidated,   to allow for explanatory text as described in section 5.2 of RFC7468.  If more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.  The certificate is encoded in PEM format.  When serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:      base64(     -----BEGIN CERTIFICATE-----     ...     -----END CERTIFICATE-----     )
    - conditions::Vector{IoK8sApiCertificatesV1CertificateSigningRequestCondition} : conditions applied to the request. Known conditions are \&quot;Approved\&quot;, \&quot;Denied\&quot;, and \&quot;Failed\&quot;.
"""
mutable struct IoK8sApiCertificatesV1CertificateSigningRequestStatus <: SwaggerModel
    certificate::Any # spec type: Union{ Nothing, Vector{UInt8} } # spec name: certificate
    conditions::Any # spec type: Union{ Nothing, Vector{IoK8sApiCertificatesV1CertificateSigningRequestCondition} } # spec name: conditions

    function IoK8sApiCertificatesV1CertificateSigningRequestStatus(;certificate=nothing, conditions=nothing)
        o = new()
        validate_property(IoK8sApiCertificatesV1CertificateSigningRequestStatus, Symbol("certificate"), certificate)
        setfield!(o, Symbol("certificate"), certificate)
        validate_property(IoK8sApiCertificatesV1CertificateSigningRequestStatus, Symbol("conditions"), conditions)
        setfield!(o, Symbol("conditions"), conditions)
        o
    end
end # type IoK8sApiCertificatesV1CertificateSigningRequestStatus

const _property_map_IoK8sApiCertificatesV1CertificateSigningRequestStatus = Dict{Symbol,Symbol}(Symbol("certificate")=>Symbol("certificate"), Symbol("conditions")=>Symbol("conditions"))
const _property_types_IoK8sApiCertificatesV1CertificateSigningRequestStatus = Dict{Symbol,String}(Symbol("certificate")=>"Vector{UInt8}", Symbol("conditions")=>"Vector{IoK8sApiCertificatesV1CertificateSigningRequestCondition}")
Base.propertynames(::Type{ IoK8sApiCertificatesV1CertificateSigningRequestStatus }) = collect(keys(_property_map_IoK8sApiCertificatesV1CertificateSigningRequestStatus))
Swagger.property_type(::Type{ IoK8sApiCertificatesV1CertificateSigningRequestStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCertificatesV1CertificateSigningRequestStatus[name]))}
Swagger.field_name(::Type{ IoK8sApiCertificatesV1CertificateSigningRequestStatus }, property_name::Symbol) =  _property_map_IoK8sApiCertificatesV1CertificateSigningRequestStatus[property_name]

function check_required(o::IoK8sApiCertificatesV1CertificateSigningRequestStatus)
    true
end

function validate_property(::Type{ IoK8sApiCertificatesV1CertificateSigningRequestStatus }, name::Symbol, val)
    if name === Symbol("certificate")
    end
end
