# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""Condition contains details for one aspect of the current state of this API Resource.

    IoK8sApimachineryPkgApisMetaV1Condition(;
        lastTransitionTime=nothing,
        message=nothing,
        observedGeneration=nothing,
        reason=nothing,
        status=nothing,
        type=nothing,
    )

    - lastTransitionTime::IoK8sApimachineryPkgApisMetaV1Time : lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    - message::String : message is a human readable message indicating details about the transition. This may be an empty string.
    - observedGeneration::Int64 : observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    - reason::String : reason contains a programmatic identifier indicating the reason for the condition&#39;s last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    - status::String : status of the condition, one of True, False, Unknown.
    - type::String : type of condition in CamelCase or in foo.example.com/CamelCase.
"""
mutable struct IoK8sApimachineryPkgApisMetaV1Condition <: SwaggerModel
    lastTransitionTime::Any # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1Time } # spec name: lastTransitionTime
    message::Any # spec type: Union{ Nothing, String } # spec name: message
    observedGeneration::Any # spec type: Union{ Nothing, Int64 } # spec name: observedGeneration
    reason::Any # spec type: Union{ Nothing, String } # spec name: reason
    status::Any # spec type: Union{ Nothing, String } # spec name: status
    type::Any # spec type: Union{ Nothing, String } # spec name: type

    function IoK8sApimachineryPkgApisMetaV1Condition(;lastTransitionTime=nothing, message=nothing, observedGeneration=nothing, reason=nothing, status=nothing, type=nothing)
        o = new()
        validate_property(IoK8sApimachineryPkgApisMetaV1Condition, Symbol("lastTransitionTime"), lastTransitionTime)
        setfield!(o, Symbol("lastTransitionTime"), lastTransitionTime)
        validate_property(IoK8sApimachineryPkgApisMetaV1Condition, Symbol("message"), message)
        setfield!(o, Symbol("message"), message)
        validate_property(IoK8sApimachineryPkgApisMetaV1Condition, Symbol("observedGeneration"), observedGeneration)
        setfield!(o, Symbol("observedGeneration"), observedGeneration)
        validate_property(IoK8sApimachineryPkgApisMetaV1Condition, Symbol("reason"), reason)
        setfield!(o, Symbol("reason"), reason)
        validate_property(IoK8sApimachineryPkgApisMetaV1Condition, Symbol("status"), status)
        setfield!(o, Symbol("status"), status)
        validate_property(IoK8sApimachineryPkgApisMetaV1Condition, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        o
    end
end # type IoK8sApimachineryPkgApisMetaV1Condition

const _property_map_IoK8sApimachineryPkgApisMetaV1Condition = Dict{Symbol,Symbol}(Symbol("lastTransitionTime")=>Symbol("lastTransitionTime"), Symbol("message")=>Symbol("message"), Symbol("observedGeneration")=>Symbol("observedGeneration"), Symbol("reason")=>Symbol("reason"), Symbol("status")=>Symbol("status"), Symbol("type")=>Symbol("type"))
const _property_types_IoK8sApimachineryPkgApisMetaV1Condition = Dict{Symbol,String}(Symbol("lastTransitionTime")=>"IoK8sApimachineryPkgApisMetaV1Time", Symbol("message")=>"String", Symbol("observedGeneration")=>"Int64", Symbol("reason")=>"String", Symbol("status")=>"String", Symbol("type")=>"String")
Base.propertynames(::Type{ IoK8sApimachineryPkgApisMetaV1Condition }) = collect(keys(_property_map_IoK8sApimachineryPkgApisMetaV1Condition))
Swagger.property_type(::Type{ IoK8sApimachineryPkgApisMetaV1Condition }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApimachineryPkgApisMetaV1Condition[name]))}
Swagger.field_name(::Type{ IoK8sApimachineryPkgApisMetaV1Condition }, property_name::Symbol) =  _property_map_IoK8sApimachineryPkgApisMetaV1Condition[property_name]

function check_required(o::IoK8sApimachineryPkgApisMetaV1Condition)
    (getproperty(o, Symbol("lastTransitionTime")) === nothing) && (return false)
    (getproperty(o, Symbol("message")) === nothing) && (return false)
    (getproperty(o, Symbol("reason")) === nothing) && (return false)
    (getproperty(o, Symbol("status")) === nothing) && (return false)
    (getproperty(o, Symbol("type")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApimachineryPkgApisMetaV1Condition }, name::Symbol, val)
end
