# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.  Kubelets use this API to obtain:  1. client certificates to authenticate to kube-apiserver (with the \&quot;kubernetes.io/kube-apiserver-client-kubelet\&quot; signerName).  2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the \&quot;kubernetes.io/kubelet-serving\&quot; signerName).  This API can be used to request client certificates to authenticate to kube-apiserver (with the \&quot;kubernetes.io/kube-apiserver-client\&quot; signerName), or to obtain certificates from custom non-Kubernetes signers.

    IoK8sApiCertificatesV1CertificateSigningRequest(;
        apiVersion=nothing,
        kind=nothing,
        metadata=nothing,
        spec=nothing,
        status=nothing,
    )

    - apiVersion::String : APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    - kind::String : Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    - metadata::IoK8sApimachineryPkgApisMetaV1ObjectMeta
    - spec::IoK8sApiCertificatesV1CertificateSigningRequestSpec : spec contains the certificate request, and is immutable after creation. Only the request, signerName, and usages fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users.
    - status::IoK8sApiCertificatesV1CertificateSigningRequestStatus : status contains information about whether the request is approved or denied, and the certificate issued by the signer, or the failure condition indicating signer failure.
"""
mutable struct IoK8sApiCertificatesV1CertificateSigningRequest <: SwaggerModel
    apiVersion::Any # spec type: Union{ Nothing, String } # spec name: apiVersion
    kind::Any # spec type: Union{ Nothing, String } # spec name: kind
    metadata::Any # spec type: Union{ Nothing, IoK8sApimachineryPkgApisMetaV1ObjectMeta } # spec name: metadata
    spec::Any # spec type: Union{ Nothing, IoK8sApiCertificatesV1CertificateSigningRequestSpec } # spec name: spec
    status::Any # spec type: Union{ Nothing, IoK8sApiCertificatesV1CertificateSigningRequestStatus } # spec name: status

    function IoK8sApiCertificatesV1CertificateSigningRequest(;apiVersion=nothing, kind=nothing, metadata=nothing, spec=nothing, status=nothing)
        o = new()
        validate_property(IoK8sApiCertificatesV1CertificateSigningRequest, Symbol("apiVersion"), apiVersion)
        setfield!(o, Symbol("apiVersion"), apiVersion)
        validate_property(IoK8sApiCertificatesV1CertificateSigningRequest, Symbol("kind"), kind)
        setfield!(o, Symbol("kind"), kind)
        validate_property(IoK8sApiCertificatesV1CertificateSigningRequest, Symbol("metadata"), metadata)
        setfield!(o, Symbol("metadata"), metadata)
        validate_property(IoK8sApiCertificatesV1CertificateSigningRequest, Symbol("spec"), spec)
        setfield!(o, Symbol("spec"), spec)
        validate_property(IoK8sApiCertificatesV1CertificateSigningRequest, Symbol("status"), status)
        setfield!(o, Symbol("status"), status)
        o
    end
end # type IoK8sApiCertificatesV1CertificateSigningRequest

const _property_map_IoK8sApiCertificatesV1CertificateSigningRequest = Dict{Symbol,Symbol}(Symbol("apiVersion")=>Symbol("apiVersion"), Symbol("kind")=>Symbol("kind"), Symbol("metadata")=>Symbol("metadata"), Symbol("spec")=>Symbol("spec"), Symbol("status")=>Symbol("status"))
const _property_types_IoK8sApiCertificatesV1CertificateSigningRequest = Dict{Symbol,String}(Symbol("apiVersion")=>"String", Symbol("kind")=>"String", Symbol("metadata")=>"IoK8sApimachineryPkgApisMetaV1ObjectMeta", Symbol("spec")=>"IoK8sApiCertificatesV1CertificateSigningRequestSpec", Symbol("status")=>"IoK8sApiCertificatesV1CertificateSigningRequestStatus")
Base.propertynames(::Type{ IoK8sApiCertificatesV1CertificateSigningRequest }) = collect(keys(_property_map_IoK8sApiCertificatesV1CertificateSigningRequest))
Swagger.property_type(::Type{ IoK8sApiCertificatesV1CertificateSigningRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiCertificatesV1CertificateSigningRequest[name]))}
Swagger.field_name(::Type{ IoK8sApiCertificatesV1CertificateSigningRequest }, property_name::Symbol) =  _property_map_IoK8sApiCertificatesV1CertificateSigningRequest[property_name]

function check_required(o::IoK8sApiCertificatesV1CertificateSigningRequest)
    (getproperty(o, Symbol("spec")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApiCertificatesV1CertificateSigningRequest }, name::Symbol, val)
end
