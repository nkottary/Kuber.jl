# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.

    IoK8sApiAutoscalingV2beta2HPAScalingRules(;
        policies=nothing,
        selectPolicy=nothing,
        stabilizationWindowSeconds=nothing,
    )

    - policies::Vector{IoK8sApiAutoscalingV2beta2HPAScalingPolicy} : policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
    - selectPolicy::String : selectPolicy is used to specify which policy should be used. If not set, the default value MaxPolicySelect is used.
    - stabilizationWindowSeconds::Int32 : StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
"""
mutable struct IoK8sApiAutoscalingV2beta2HPAScalingRules <: SwaggerModel
    policies::Any # spec type: Union{ Nothing, Vector{IoK8sApiAutoscalingV2beta2HPAScalingPolicy} } # spec name: policies
    selectPolicy::Any # spec type: Union{ Nothing, String } # spec name: selectPolicy
    stabilizationWindowSeconds::Any # spec type: Union{ Nothing, Int32 } # spec name: stabilizationWindowSeconds

    function IoK8sApiAutoscalingV2beta2HPAScalingRules(;policies=nothing, selectPolicy=nothing, stabilizationWindowSeconds=nothing)
        o = new()
        validate_property(IoK8sApiAutoscalingV2beta2HPAScalingRules, Symbol("policies"), policies)
        setfield!(o, Symbol("policies"), policies)
        validate_property(IoK8sApiAutoscalingV2beta2HPAScalingRules, Symbol("selectPolicy"), selectPolicy)
        setfield!(o, Symbol("selectPolicy"), selectPolicy)
        validate_property(IoK8sApiAutoscalingV2beta2HPAScalingRules, Symbol("stabilizationWindowSeconds"), stabilizationWindowSeconds)
        setfield!(o, Symbol("stabilizationWindowSeconds"), stabilizationWindowSeconds)
        o
    end
end # type IoK8sApiAutoscalingV2beta2HPAScalingRules

const _property_map_IoK8sApiAutoscalingV2beta2HPAScalingRules = Dict{Symbol,Symbol}(Symbol("policies")=>Symbol("policies"), Symbol("selectPolicy")=>Symbol("selectPolicy"), Symbol("stabilizationWindowSeconds")=>Symbol("stabilizationWindowSeconds"))
const _property_types_IoK8sApiAutoscalingV2beta2HPAScalingRules = Dict{Symbol,String}(Symbol("policies")=>"Vector{IoK8sApiAutoscalingV2beta2HPAScalingPolicy}", Symbol("selectPolicy")=>"String", Symbol("stabilizationWindowSeconds")=>"Int32")
Base.propertynames(::Type{ IoK8sApiAutoscalingV2beta2HPAScalingRules }) = collect(keys(_property_map_IoK8sApiAutoscalingV2beta2HPAScalingRules))
Swagger.property_type(::Type{ IoK8sApiAutoscalingV2beta2HPAScalingRules }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiAutoscalingV2beta2HPAScalingRules[name]))}
Swagger.field_name(::Type{ IoK8sApiAutoscalingV2beta2HPAScalingRules }, property_name::Symbol) =  _property_map_IoK8sApiAutoscalingV2beta2HPAScalingRules[property_name]

function check_required(o::IoK8sApiAutoscalingV2beta2HPAScalingRules)
    true
end

function validate_property(::Type{ IoK8sApiAutoscalingV2beta2HPAScalingRules }, name::Symbol, val)
end
