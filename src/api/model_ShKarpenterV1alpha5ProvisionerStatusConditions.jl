# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""Condition defines a readiness condition for a Knative resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties

    ShKarpenterV1alpha5ProvisionerStatusConditions(;
        lastTransitionTime=nothing,
        message=nothing,
        reason=nothing,
        severity=nothing,
        status=nothing,
        type=nothing,
    )

    - lastTransitionTime::String : LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
    - message::String : A human readable message indicating details about the transition.
    - reason::String : The reason for the condition&#39;s last transition.
    - severity::String : Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
    - status::String : Status of the condition, one of True, False, Unknown.
    - type::String : Type of condition.
"""
mutable struct ShKarpenterV1alpha5ProvisionerStatusConditions <: SwaggerModel
    lastTransitionTime::Any # spec type: Union{ Nothing, String } # spec name: lastTransitionTime
    message::Any # spec type: Union{ Nothing, String } # spec name: message
    reason::Any # spec type: Union{ Nothing, String } # spec name: reason
    severity::Any # spec type: Union{ Nothing, String } # spec name: severity
    status::Any # spec type: Union{ Nothing, String } # spec name: status
    type::Any # spec type: Union{ Nothing, String } # spec name: type

    function ShKarpenterV1alpha5ProvisionerStatusConditions(;lastTransitionTime=nothing, message=nothing, reason=nothing, severity=nothing, status=nothing, type=nothing)
        o = new()
        validate_property(ShKarpenterV1alpha5ProvisionerStatusConditions, Symbol("lastTransitionTime"), lastTransitionTime)
        setfield!(o, Symbol("lastTransitionTime"), lastTransitionTime)
        validate_property(ShKarpenterV1alpha5ProvisionerStatusConditions, Symbol("message"), message)
        setfield!(o, Symbol("message"), message)
        validate_property(ShKarpenterV1alpha5ProvisionerStatusConditions, Symbol("reason"), reason)
        setfield!(o, Symbol("reason"), reason)
        validate_property(ShKarpenterV1alpha5ProvisionerStatusConditions, Symbol("severity"), severity)
        setfield!(o, Symbol("severity"), severity)
        validate_property(ShKarpenterV1alpha5ProvisionerStatusConditions, Symbol("status"), status)
        setfield!(o, Symbol("status"), status)
        validate_property(ShKarpenterV1alpha5ProvisionerStatusConditions, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        o
    end
end # type ShKarpenterV1alpha5ProvisionerStatusConditions

const _property_map_ShKarpenterV1alpha5ProvisionerStatusConditions = Dict{Symbol,Symbol}(Symbol("lastTransitionTime")=>Symbol("lastTransitionTime"), Symbol("message")=>Symbol("message"), Symbol("reason")=>Symbol("reason"), Symbol("severity")=>Symbol("severity"), Symbol("status")=>Symbol("status"), Symbol("type")=>Symbol("type"))
const _property_types_ShKarpenterV1alpha5ProvisionerStatusConditions = Dict{Symbol,String}(Symbol("lastTransitionTime")=>"String", Symbol("message")=>"String", Symbol("reason")=>"String", Symbol("severity")=>"String", Symbol("status")=>"String", Symbol("type")=>"String")
Base.propertynames(::Type{ ShKarpenterV1alpha5ProvisionerStatusConditions }) = collect(keys(_property_map_ShKarpenterV1alpha5ProvisionerStatusConditions))
Swagger.property_type(::Type{ ShKarpenterV1alpha5ProvisionerStatusConditions }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ShKarpenterV1alpha5ProvisionerStatusConditions[name]))}
Swagger.field_name(::Type{ ShKarpenterV1alpha5ProvisionerStatusConditions }, property_name::Symbol) =  _property_map_ShKarpenterV1alpha5ProvisionerStatusConditions[property_name]

function check_required(o::ShKarpenterV1alpha5ProvisionerStatusConditions)
    (getproperty(o, Symbol("status")) === nothing) && (return false)
    (getproperty(o, Symbol("type")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ShKarpenterV1alpha5ProvisionerStatusConditions }, name::Symbol, val)
end
