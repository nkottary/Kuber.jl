# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""TokenRequest contains parameters of a service account token.

    IoK8sApiStorageV1TokenRequest(;
        audience=nothing,
        expirationSeconds=nothing,
    )

    - audience::String : Audience is the intended audience of the token in \&quot;TokenRequestSpec\&quot;. It will default to the audiences of kube apiserver.
    - expirationSeconds::Int64 : ExpirationSeconds is the duration of validity of the token in \&quot;TokenRequestSpec\&quot;. It has the same default value of \&quot;ExpirationSeconds\&quot; in \&quot;TokenRequestSpec\&quot;.
"""
mutable struct IoK8sApiStorageV1TokenRequest <: SwaggerModel
    audience::Any # spec type: Union{ Nothing, String } # spec name: audience
    expirationSeconds::Any # spec type: Union{ Nothing, Int64 } # spec name: expirationSeconds

    function IoK8sApiStorageV1TokenRequest(;audience=nothing, expirationSeconds=nothing)
        o = new()
        validate_property(IoK8sApiStorageV1TokenRequest, Symbol("audience"), audience)
        setfield!(o, Symbol("audience"), audience)
        validate_property(IoK8sApiStorageV1TokenRequest, Symbol("expirationSeconds"), expirationSeconds)
        setfield!(o, Symbol("expirationSeconds"), expirationSeconds)
        o
    end
end # type IoK8sApiStorageV1TokenRequest

const _property_map_IoK8sApiStorageV1TokenRequest = Dict{Symbol,Symbol}(Symbol("audience")=>Symbol("audience"), Symbol("expirationSeconds")=>Symbol("expirationSeconds"))
const _property_types_IoK8sApiStorageV1TokenRequest = Dict{Symbol,String}(Symbol("audience")=>"String", Symbol("expirationSeconds")=>"Int64")
Base.propertynames(::Type{ IoK8sApiStorageV1TokenRequest }) = collect(keys(_property_map_IoK8sApiStorageV1TokenRequest))
Swagger.property_type(::Type{ IoK8sApiStorageV1TokenRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IoK8sApiStorageV1TokenRequest[name]))}
Swagger.field_name(::Type{ IoK8sApiStorageV1TokenRequest }, property_name::Symbol) =  _property_map_IoK8sApiStorageV1TokenRequest[property_name]

function check_required(o::IoK8sApiStorageV1TokenRequest)
    (getproperty(o, Symbol("audience")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IoK8sApiStorageV1TokenRequest }, name::Symbol, val)
end
