# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""ProvisionerSpec is the top level provisioner specification. Provisioners launch nodes in response to pods where status.conditions[type&#x3D;unschedulable, status&#x3D;true]. Node configuration is driven by through a combination of provisioner specification (defaults) and pod scheduling constraints (overrides). A single provisioner is capable of managing highly diverse capacity within a single cluster and in most cases, only one should be necessary. It&#39;s possible to define multiple provisioners. These provisioners may have different defaults and can be specifically targeted by pods using pod.spec.nodeSelector[\&quot;karpenter.sh/provisioner-name\&quot;]&#x3D;$PROVISIONER_NAME.

    ShKarpenterV1alpha5ProvisionerSpec(;
        labels=nothing,
        limits=nothing,
        provider=nothing,
        requirements=nothing,
        taints=nothing,
        ttlSecondsAfterEmpty=nothing,
        ttlSecondsUntilExpired=nothing,
    )

    - labels::Dict{String, String} : Labels are layered with Requirements and applied to every node.
    - limits::ShKarpenterV1alpha5ProvisionerSpecLimits
    - provider::Any : Provider contains fields specific to your cloudprovider.
    - requirements::Vector{ShKarpenterV1alpha5ProvisionerSpecRequirements} : Requirements are layered with Labels and applied to every node.
    - taints::Vector{ShKarpenterV1alpha5ProvisionerSpecTaints} : Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.
    - ttlSecondsAfterEmpty::Int64 : TTLSecondsAfterEmpty is the number of seconds the controller will wait before attempting to delete a node, measured from when the node is detected to be empty. A Node is considered to be empty when it does not have pods scheduled to it, excluding daemonsets.   Termination due to underutilization is disabled if this field is not set.
    - ttlSecondsUntilExpired::Int64 : TTLSecondsUntilExpired is the number of seconds the controller will wait before terminating a node, measured from when the node is created. This is useful to implement features like eventually consistent node upgrade, memory leak protection, and disruption testing.   Termination due to expiration is disabled if this field is not set.
"""
mutable struct ShKarpenterV1alpha5ProvisionerSpec <: SwaggerModel
    labels::Any # spec type: Union{ Nothing, Dict{String, String} } # spec name: labels
    limits::Any # spec type: Union{ Nothing, ShKarpenterV1alpha5ProvisionerSpecLimits } # spec name: limits
    provider::Any # spec type: Union{ Nothing, Any } # spec name: provider
    requirements::Any # spec type: Union{ Nothing, Vector{ShKarpenterV1alpha5ProvisionerSpecRequirements} } # spec name: requirements
    taints::Any # spec type: Union{ Nothing, Vector{ShKarpenterV1alpha5ProvisionerSpecTaints} } # spec name: taints
    ttlSecondsAfterEmpty::Any # spec type: Union{ Nothing, Int64 } # spec name: ttlSecondsAfterEmpty
    ttlSecondsUntilExpired::Any # spec type: Union{ Nothing, Int64 } # spec name: ttlSecondsUntilExpired

    function ShKarpenterV1alpha5ProvisionerSpec(;labels=nothing, limits=nothing, provider=nothing, requirements=nothing, taints=nothing, ttlSecondsAfterEmpty=nothing, ttlSecondsUntilExpired=nothing)
        o = new()
        validate_property(ShKarpenterV1alpha5ProvisionerSpec, Symbol("labels"), labels)
        setfield!(o, Symbol("labels"), labels)
        validate_property(ShKarpenterV1alpha5ProvisionerSpec, Symbol("limits"), limits)
        setfield!(o, Symbol("limits"), limits)
        validate_property(ShKarpenterV1alpha5ProvisionerSpec, Symbol("provider"), provider)
        setfield!(o, Symbol("provider"), provider)
        validate_property(ShKarpenterV1alpha5ProvisionerSpec, Symbol("requirements"), requirements)
        setfield!(o, Symbol("requirements"), requirements)
        validate_property(ShKarpenterV1alpha5ProvisionerSpec, Symbol("taints"), taints)
        setfield!(o, Symbol("taints"), taints)
        validate_property(ShKarpenterV1alpha5ProvisionerSpec, Symbol("ttlSecondsAfterEmpty"), ttlSecondsAfterEmpty)
        setfield!(o, Symbol("ttlSecondsAfterEmpty"), ttlSecondsAfterEmpty)
        validate_property(ShKarpenterV1alpha5ProvisionerSpec, Symbol("ttlSecondsUntilExpired"), ttlSecondsUntilExpired)
        setfield!(o, Symbol("ttlSecondsUntilExpired"), ttlSecondsUntilExpired)
        o
    end
end # type ShKarpenterV1alpha5ProvisionerSpec

const _property_map_ShKarpenterV1alpha5ProvisionerSpec = Dict{Symbol,Symbol}(Symbol("labels")=>Symbol("labels"), Symbol("limits")=>Symbol("limits"), Symbol("provider")=>Symbol("provider"), Symbol("requirements")=>Symbol("requirements"), Symbol("taints")=>Symbol("taints"), Symbol("ttlSecondsAfterEmpty")=>Symbol("ttlSecondsAfterEmpty"), Symbol("ttlSecondsUntilExpired")=>Symbol("ttlSecondsUntilExpired"))
const _property_types_ShKarpenterV1alpha5ProvisionerSpec = Dict{Symbol,String}(Symbol("labels")=>"Dict{String, String}", Symbol("limits")=>"ShKarpenterV1alpha5ProvisionerSpecLimits", Symbol("provider")=>"Any", Symbol("requirements")=>"Vector{ShKarpenterV1alpha5ProvisionerSpecRequirements}", Symbol("taints")=>"Vector{ShKarpenterV1alpha5ProvisionerSpecTaints}", Symbol("ttlSecondsAfterEmpty")=>"Int64", Symbol("ttlSecondsUntilExpired")=>"Int64")
Base.propertynames(::Type{ ShKarpenterV1alpha5ProvisionerSpec }) = collect(keys(_property_map_ShKarpenterV1alpha5ProvisionerSpec))
Swagger.property_type(::Type{ ShKarpenterV1alpha5ProvisionerSpec }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ShKarpenterV1alpha5ProvisionerSpec[name]))}
Swagger.field_name(::Type{ ShKarpenterV1alpha5ProvisionerSpec }, property_name::Symbol) =  _property_map_ShKarpenterV1alpha5ProvisionerSpec[property_name]

function check_required(o::ShKarpenterV1alpha5ProvisionerSpec)
    true
end

function validate_property(::Type{ ShKarpenterV1alpha5ProvisionerSpec }, name::Symbol, val)
end
