# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


@doc raw"""The node this Taint is attached to has the \&quot;effect\&quot; on any pod that does not tolerate the Taint.

    ShKarpenterV1alpha5ProvisionerSpecTaints(;
        effect=nothing,
        key=nothing,
        timeAdded=nothing,
        value=nothing,
    )

    - effect::String : Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
    - key::String : Required. The taint key to be applied to a node.
    - timeAdded::DateTime : TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
    - value::String : The taint value corresponding to the taint key.
"""
mutable struct ShKarpenterV1alpha5ProvisionerSpecTaints <: SwaggerModel
    effect::Any # spec type: Union{ Nothing, String } # spec name: effect
    key::Any # spec type: Union{ Nothing, String } # spec name: key
    timeAdded::Any # spec type: Union{ Nothing, DateTime } # spec name: timeAdded
    value::Any # spec type: Union{ Nothing, String } # spec name: value

    function ShKarpenterV1alpha5ProvisionerSpecTaints(;effect=nothing, key=nothing, timeAdded=nothing, value=nothing)
        o = new()
        validate_property(ShKarpenterV1alpha5ProvisionerSpecTaints, Symbol("effect"), effect)
        setfield!(o, Symbol("effect"), effect)
        validate_property(ShKarpenterV1alpha5ProvisionerSpecTaints, Symbol("key"), key)
        setfield!(o, Symbol("key"), key)
        validate_property(ShKarpenterV1alpha5ProvisionerSpecTaints, Symbol("timeAdded"), timeAdded)
        setfield!(o, Symbol("timeAdded"), timeAdded)
        validate_property(ShKarpenterV1alpha5ProvisionerSpecTaints, Symbol("value"), value)
        setfield!(o, Symbol("value"), value)
        o
    end
end # type ShKarpenterV1alpha5ProvisionerSpecTaints

const _property_map_ShKarpenterV1alpha5ProvisionerSpecTaints = Dict{Symbol,Symbol}(Symbol("effect")=>Symbol("effect"), Symbol("key")=>Symbol("key"), Symbol("timeAdded")=>Symbol("timeAdded"), Symbol("value")=>Symbol("value"))
const _property_types_ShKarpenterV1alpha5ProvisionerSpecTaints = Dict{Symbol,String}(Symbol("effect")=>"String", Symbol("key")=>"String", Symbol("timeAdded")=>"DateTime", Symbol("value")=>"String")
Base.propertynames(::Type{ ShKarpenterV1alpha5ProvisionerSpecTaints }) = collect(keys(_property_map_ShKarpenterV1alpha5ProvisionerSpecTaints))
Swagger.property_type(::Type{ ShKarpenterV1alpha5ProvisionerSpecTaints }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ShKarpenterV1alpha5ProvisionerSpecTaints[name]))}
Swagger.field_name(::Type{ ShKarpenterV1alpha5ProvisionerSpecTaints }, property_name::Symbol) =  _property_map_ShKarpenterV1alpha5ProvisionerSpecTaints[property_name]

function check_required(o::ShKarpenterV1alpha5ProvisionerSpecTaints)
    (getproperty(o, Symbol("effect")) === nothing) && (return false)
    (getproperty(o, Symbol("key")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ShKarpenterV1alpha5ProvisionerSpecTaints }, name::Symbol, val)
end
